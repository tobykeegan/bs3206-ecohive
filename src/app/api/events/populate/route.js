import Event from '@/models/event';
import User from '@/models/user';
import Attendance from '@/models/attendance';
import { NextResponse } from 'next/server';
import { connect } from '@/services/mongoose';
import { generateEvent } from '@/test/utils';
require('dotenv').config();

await connect();

/**
 * Development utility that will regenerate some events in the database.
 *
 * @author Toby Keegan
 */

export async function POST(request) {
  const oldCount = await Event.countDocuments();

  // Clear all the events
  await Event.deleteMany();
  // Clear all the attendance records
  await Attendance.deleteMany();

  // get all the creators from the User model
  const creators = await User.find({});

  const numEvents = Math.floor(Math.random() * 50 + 1);

  for (let i = 0; i < numEvents; i++) {
    const randomCreator = creators[Math.floor(Math.random() * creators.length)];
    const event = generateEvent(randomCreator._id);
    event.name = `Events API Test Event #${i + 1}`;
    event.description = `Event #${i + 1} generated by /api/events/populate`;
    await event.save();

    // Add some attendance records for the event
    const numAttendees = Math.floor(Math.random() * 10);
    for (let j = 0; j < numAttendees; j++) {
      const randomUser = creators[Math.floor(Math.random() * creators.length)];
      const newAttend = new Attendance({
        event: event._id,
        user: randomUser._id,
        timestamp: new Date(),
      });
      await newAttend.save();
    }
  }

  const newCount = await Event.countDocuments();

  return NextResponse.json(
    {
      message: 'Events repopulated',
      events: {
        description: 'The number of events in the database',
        before: oldCount,
        after: newCount,
      },
      attendance: {
        description: 'The number of attendance records in the database',
        count: await Attendance.countDocuments(),
      },
    },
    {
      status: 200,
    },
  );
}
